diff --git a/src/sqlancer/presto/PrestoSchema.java b/src/sqlancer/presto/PrestoSchema.java
index 112da7ef..913a3879 100644
--- a/src/sqlancer/presto/PrestoSchema.java
+++ b/src/sqlancer/presto/PrestoSchema.java
@@ -129,15 +129,15 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
         case "DATE":
             primitiveType = PrestoDataType.DATE;
             break;
-        case "TIME":
+        case "TIMESTAMP":
+            primitiveType = PrestoDataType.TIMESTAMP;
+            break;
+/*        case "TIME":
             primitiveType = PrestoDataType.TIME;
             break;
         case "TIME WITH TIME ZONE":
             primitiveType = PrestoDataType.TIME_WITH_TIME_ZONE;
             break;
-        case "TIMESTAMP":
-            primitiveType = PrestoDataType.TIMESTAMP;
-            break;
         case "TIMESTAMP WITH TIME ZONE":
             primitiveType = PrestoDataType.TIMESTAMP_WITH_TIME_ZONE;
             break;
@@ -149,7 +149,7 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
             break;
         case "JSON":
             primitiveType = PrestoDataType.JSON;
-            break;
+            break;*/
         case "ARRAY":
             int bracesEnd = typeString.length() - 1;
             primitiveType = PrestoDataType.ARRAY;
@@ -169,8 +169,9 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
     }
 
     public enum PrestoDataType {
-        BOOLEAN, INT, FLOAT, DECIMAL, VARCHAR, CHAR, VARBINARY, JSON, DATE, TIME, TIMESTAMP, TIME_WITH_TIME_ZONE,
-        TIMESTAMP_WITH_TIME_ZONE, INTERVAL_YEAR_TO_MONTH, INTERVAL_DAY_TO_SECOND, ARRAY,
+        BOOLEAN, INT, FLOAT, DECIMAL, VARCHAR, CHAR, VARBINARY, DATE, TIMESTAMP, ARRAY,
+        // TIME, TIME_WITH_TIME_ZONE,
+        // TIMESTAMP_WITH_TIME_ZONE, INTERVAL_YEAR_TO_MONTH, INTERVAL_DAY_TO_SECOND, JSON, ARRAY,
         // MAP,
         // ROW,
         // IPADDRESS,
@@ -192,20 +193,25 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
         }
 
         public static List<PrestoDataType> getNumericTypes() {
-            return Arrays.asList(INT, FLOAT, DECIMAL, DATE, TIME, TIMESTAMP, TIME_WITH_TIME_ZONE,
-                    TIMESTAMP_WITH_TIME_ZONE);
+            return Arrays.asList(INT, FLOAT, DECIMAL, DATE, TIMESTAMP
+                    // ,TIME_WITH_TIME_ZONE, TIME,
+                    // TIMESTAMP_WITH_TIME_ZONE
+            );
         }
 
         public static List<PrestoDataType> getComparableTypes() {
-            return Arrays.asList(BOOLEAN, INT, FLOAT, DECIMAL, VARCHAR, CHAR, VARBINARY, JSON, DATE, TIME, TIMESTAMP,
-                    TIME_WITH_TIME_ZONE, TIMESTAMP_WITH_TIME_ZONE, INTERVAL_YEAR_TO_MONTH, INTERVAL_DAY_TO_SECOND);
+            return Arrays.asList(BOOLEAN, INT, FLOAT, DECIMAL, VARCHAR, CHAR, VARBINARY, DATE, TIMESTAMP
+                    //  ,TIME, JSON,TIME_WITH_TIME_ZONE, TIMESTAMP_WITH_TIME_ZONE,
+                    //  INTERVAL_YEAR_TO_MONTH, INTERVAL_DAY_TO_SECOND
+            );
         }
 
         public static List<PrestoDataType> getOrderableTypes() {
-            return Arrays.asList(BOOLEAN, INT, FLOAT, DECIMAL, VARCHAR, CHAR, VARBINARY,
+            return Arrays.asList(BOOLEAN, INT, FLOAT, DECIMAL, VARCHAR, CHAR, VARBINARY,DATE, TIMESTAMP, ARRAY
                     // JSON,
-                    DATE, TIME, TIMESTAMP, TIME_WITH_TIME_ZONE, TIMESTAMP_WITH_TIME_ZONE, INTERVAL_YEAR_TO_MONTH,
-                    INTERVAL_DAY_TO_SECOND, ARRAY);
+                    // TIME,  TIME_WITH_TIME_ZONE, TIMESTAMP_WITH_TIME_ZONE, INTERVAL_YEAR_TO_MONTH,
+                    //INTERVAL_DAY_TO_SECOND
+            );
         }
 
         public static List<PrestoDataType> getNumberTypes() {
@@ -213,15 +219,16 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
         }
 
         public static List<PrestoDataType> getTemporalTypes() {
-            return Arrays.asList(DATE, TIME, TIMESTAMP, TIME_WITH_TIME_ZONE, TIMESTAMP_WITH_TIME_ZONE);
+            return Arrays.asList(DATE,TIMESTAMP//, TIME,  TIME_WITH_TIME_ZONE, TIMESTAMP_WITH_TIME_ZONE
+                     );
         }
 
         public static List<PrestoDataType> getIntervalTypes() {
-            return Arrays.asList(INTERVAL_YEAR_TO_MONTH, INTERVAL_DAY_TO_SECOND);
+            return Arrays.asList(/*INTERVAL_YEAR_TO_MONTH, INTERVAL_DAY_TO_SECOND*/);
         }
 
         public static List<PrestoDataType> getTextTypes() {
-            return Arrays.asList(VARCHAR, CHAR, VARBINARY, JSON);
+            return Arrays.asList(VARCHAR, CHAR, VARBINARY /*,JSON*/);
         }
 
         public boolean isNumeric() {
@@ -287,7 +294,7 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
                 scale = Math.toIntExact(4);
                 break;
             case VARBINARY:
-            case JSON:
+           //case JSON:
             case VARCHAR:
             case CHAR:
                 size = Math.toIntExact(Randomly.getNotCachedInteger(10, 250));
@@ -296,12 +303,12 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
                 return new PrestoCompositeDataType(type, PrestoCompositeDataType.getRandomWithoutNull());
             case BOOLEAN:
             case DATE:
-            case TIME:
-            case TIME_WITH_TIME_ZONE:
             case TIMESTAMP:
+            /*case TIME:
+            case TIME_WITH_TIME_ZONE:
             case TIMESTAMP_WITH_TIME_ZONE:
             case INTERVAL_DAY_TO_SECOND:
-            case INTERVAL_YEAR_TO_MONTH:
+            case INTERVAL_YEAR_TO_MONTH:*/
                 size = 0;
                 break;
             default:
@@ -325,7 +332,7 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
                 size = Math.toIntExact(8);
                 scale = Math.toIntExact(4);
                 break;
-            case JSON:
+            //case JSON:
             case VARCHAR:
             case CHAR:
                 size = Math.toIntExact(Randomly.getNotCachedInteger(10, 250));
@@ -335,12 +342,12 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
             case BOOLEAN:
             case VARBINARY:
             case DATE:
-            case TIME:
             case TIMESTAMP:
+            /*case TIME:
             case TIMESTAMP_WITH_TIME_ZONE:
             case TIME_WITH_TIME_ZONE:
             case INTERVAL_DAY_TO_SECOND:
-            case INTERVAL_YEAR_TO_MONTH:
+            case INTERVAL_YEAR_TO_MONTH:*/
                 size = 0;
                 break;
             default:
@@ -386,8 +393,8 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
                 }
             case VARBINARY:
                 return "VARBINARY";
-            case JSON:
-                return "JSON";
+            /*case JSON:
+                return "JSON";*/
             case VARCHAR:
                 return "VARCHAR" + "(" + size + ")";
             case CHAR:
@@ -405,20 +412,20 @@ public class PrestoSchema extends AbstractSchema<PrestoGlobalState, PrestoSchema
                 return "DECIMAL" + "(" + size + ", " + scale + ")";
             case BOOLEAN:
                 return "BOOLEAN";
-            case TIMESTAMP_WITH_TIME_ZONE:
-                return "TIMESTAMP WITH TIME ZONE";
+            /*case TIMESTAMP_WITH_TIME_ZONE:
+                return "TIMESTAMP WITH TIME ZONE";*/
             case TIMESTAMP:
                 return "TIMESTAMP";
-            case INTERVAL_YEAR_TO_MONTH:
+           /* case INTERVAL_YEAR_TO_MONTH:
                 return "INTERVAL YEAR TO MONTH";
             case INTERVAL_DAY_TO_SECOND:
-                return "INTERVAL DAY TO SECOND";
+                return "INTERVAL DAY TO SECOND";*/
             case DATE:
                 return "DATE";
-            case TIME:
+            /*case TIME:
                 return "TIME";
             case TIME_WITH_TIME_ZONE:
-                return "TIME WITH TIME ZONE";
+                return "TIME WITH TIME ZONE";*/
             case ARRAY:
                 return "ARRAY(" + elementType + ")";
             case NULL:
diff --git a/src/sqlancer/presto/ast/PrestoAggregateFunction.java b/src/sqlancer/presto/ast/PrestoAggregateFunction.java
index 25840933..d163c197 100644
--- a/src/sqlancer/presto/ast/PrestoAggregateFunction.java
+++ b/src/sqlancer/presto/ast/PrestoAggregateFunction.java
@@ -61,8 +61,8 @@ public enum PrestoAggregateFunction implements PrestoFunction {
     },
     // avg(time interval type) → time interval type#
     // Returns the average interval length of all input values.
-    AVG_INTERVAL_YM("avg", PrestoDataType.INTERVAL_YEAR_TO_MONTH, PrestoDataType.INTERVAL_YEAR_TO_MONTH),
-    AVG_INTERVAL_DS("avg", PrestoDataType.INTERVAL_DAY_TO_SECOND, PrestoDataType.INTERVAL_DAY_TO_SECOND),
+//    AVG_INTERVAL_YM("avg", PrestoDataType.INTERVAL_YEAR_TO_MONTH, PrestoDataType.INTERVAL_YEAR_TO_MONTH),
+//    AVG_INTERVAL_DS("avg", PrestoDataType.INTERVAL_DAY_TO_SECOND, PrestoDataType.INTERVAL_DAY_TO_SECOND),
 
     // bool_and(boolean) → boolean#
     // Returns TRUE if every input value is TRUE, otherwise FALSE.
@@ -346,8 +346,8 @@ public enum PrestoAggregateFunction implements PrestoFunction {
     },
     // sum(time interval type) → time interval type#
     // Returns the average interval length of all input values.
-    SUM_INTERVAL_YM("sum", PrestoDataType.INTERVAL_YEAR_TO_MONTH, PrestoDataType.INTERVAL_YEAR_TO_MONTH),
-    SUM_INTERVAL_DS("sum", PrestoDataType.INTERVAL_DAY_TO_SECOND, PrestoDataType.INTERVAL_DAY_TO_SECOND),
+//    SUM_INTERVAL_YM("sum", PrestoDataType.INTERVAL_YEAR_TO_MONTH, PrestoDataType.INTERVAL_YEAR_TO_MONTH),
+//    SUM_INTERVAL_DS("sum", PrestoDataType.INTERVAL_DAY_TO_SECOND, PrestoDataType.INTERVAL_DAY_TO_SECOND),
 
     // Bitwise Aggregate Functions#
 
@@ -662,9 +662,9 @@ public enum PrestoAggregateFunction implements PrestoFunction {
     }
 
     public static PrestoAggregateFunction getRandomMetamorphicOracle() {
-        return Randomly.fromOptions(ARBITRARY, AVG, AVG_INTERVAL_YM, AVG_INTERVAL_DS, BOOL_AND, BOOL_OR, CHECKSUM,
+        return Randomly.fromOptions(ARBITRARY, AVG, BOOL_AND, BOOL_OR, CHECKSUM,
                 COUNT_ALL, COUNT_NOARGS, COUNT, COUNT_IF, EVERY, GEOMETRIC_MEAN, MAX_BY, MIN_BY, MAX, MIN, SUM,
-                SUM_INTERVAL_YM, SUM_INTERVAL_DS, BITWISE_AND_AGG, BITWISE_OR_AGG);
+                 BITWISE_AND_AGG, BITWISE_OR_AGG);
     }
 
     public static PrestoAggregateFunction getRandom() {
diff --git a/src/sqlancer/presto/ast/PrestoConstant.java b/src/sqlancer/presto/ast/PrestoConstant.java
index a469b983..b17b073e 100644
--- a/src/sqlancer/presto/ast/PrestoConstant.java
+++ b/src/sqlancer/presto/ast/PrestoConstant.java
@@ -275,20 +275,20 @@ public abstract class PrestoConstant implements PrestoExpression {
             return PrestoConstant.PrestoTextConstant.createStringConstant(randomly.getString(), type.getSize());
         case VARBINARY:
             return PrestoConstant.createVarbinaryConstant(randomly.getString());
-        case JSON:
+        /*case JSON:
             return PrestoConstant.PrestoJsonConstant.createJsonConstant();
         case TIME:
             return PrestoConstant.createTimeConstant(randomly.getLong(0, System.currentTimeMillis()));
         case TIME_WITH_TIME_ZONE:
-            return PrestoConstant.createTimeWithTimeZoneConstant(randomly.getLong(0, System.currentTimeMillis()));
+            return PrestoConstant.createTimeWithTimeZoneConstant(randomly.getLong(0, System.currentTimeMillis()));*/
         case TIMESTAMP:
             return PrestoConstant.createTimestampConstant(randomly.getLong(0, System.currentTimeMillis()));
-        case TIMESTAMP_WITH_TIME_ZONE:
+        /*case TIMESTAMP_WITH_TIME_ZONE:
             return PrestoConstant.createTimestampWithTimeZoneConstant(randomly.getLong(0, System.currentTimeMillis()));
         case INTERVAL_YEAR_TO_MONTH:
             return PrestoConstant.createIntervalYearToMonth(randomly.getLong(0, System.currentTimeMillis()));
         case INTERVAL_DAY_TO_SECOND:
-            return PrestoConstant.createIntervalDayToSecond(randomly.getLong(0, System.currentTimeMillis()));
+            return PrestoConstant.createIntervalDayToSecond(randomly.getLong(0, System.currentTimeMillis()));*/
         case INT:
             return PrestoConstant.PrestoIntConstant.createIntConstant(type, Randomly.getNonCachedInteger(),
                     castInteger);
diff --git a/src/sqlancer/presto/ast/PrestoDateFunction.java b/src/sqlancer/presto/ast/PrestoDateFunction.java
index a8e00a3c..ad57c0bb 100644
--- a/src/sqlancer/presto/ast/PrestoDateFunction.java
+++ b/src/sqlancer/presto/ast/PrestoDateFunction.java
@@ -10,10 +10,10 @@ public enum PrestoDateFunction implements PrestoFunction {
     CURRENT_DATE("current_date", PrestoDataType.DATE),
 
     // Returns the current time as of the start of the query.
-    CURRENT_TIME("current_time", PrestoDataType.TIME_WITH_TIME_ZONE),
+//    CURRENT_TIME("current_time", PrestoDataType.TIME_WITH_TIME_ZONE),
 
     // Returns the current timestamp as of the start of the query.
-    CURRENT_TIMESTAMP("current_timestamp", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
+//    CURRENT_TIMESTAMP("current_timestamp", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
 
     // Returns the current time zone in the format defined by IANA (e.g., America/Los_Angeles) or as fixed offset from
     // UTC (e.g., +08:35)
@@ -26,17 +26,13 @@ public enum PrestoDateFunction implements PrestoFunction {
     LAST_DAY_OF_MONTH("last_day_of_month", PrestoDataType.DATE, PrestoDataType.DATE),
 
     // Parses the ISO 8601 formatted string into a timestamp with time zone.
-    FROM_ISO8601_TIMESTAMP("from_iso8601_timestamp", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.VARCHAR),
+//    FROM_ISO8601_TIMESTAMP("from_iso8601_timestamp", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.VARCHAR),
 
     // Parses the ISO 8601 formatted string into a date.
     FROM_ISO8601_DATE("from_iso8601_date", PrestoDataType.DATE, PrestoDataType.VARCHAR),
 
     // Returns the UNIX timestamp unixtime as a timestamp.
-    FROM_UNIXTIME("from_unixtime", PrestoDataType.TIMESTAMP, PrestoDataType.INT),
-
-    // Returns the UNIX timestamp unixtime as a timestamp with time zone using string for the time zone.
-    FROM_UNIXTIME_TIMEZONE("from_unixtime", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.INT,
-            PrestoDataType.VARCHAR) {
+    FROM_UNIXTIME("from_unixtime", PrestoDataType.TIMESTAMP, PrestoDataType.INT) {
         @Override
         public boolean shouldPreserveOrderOfArguments() {
             return true;
@@ -45,34 +41,34 @@ public enum PrestoDateFunction implements PrestoFunction {
 
     // Returns the UNIX timestamp unixtime as a timestamp with time zone using hours and minutes for the time zone
     // offset.
-    FROM_UNIXTIME_HOURS_MINUTES("from_unixtime", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.INT,
-            PrestoDataType.INT) {
-        @Override
-        public boolean shouldPreserveOrderOfArguments() {
-            return true;
-        }
-    },
+//    FROM_UNIXTIME_HOURS_MINUTES("from_unixtime", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.INT,
+//            PrestoDataType.INT) {
+//        @Override
+//        public boolean shouldPreserveOrderOfArguments() {
+//            return true;
+//        }
+//    },
 
     // Returns the current time as of the start of the query. -> time
-    LOCALTIME("localtime", PrestoDataType.TIME),
+//    LOCALTIME("localtime", PrestoDataType.TIME),
 
     // Returns the current timestamp as of the start of the query. -> timestamp
     LOCALTIMESTAMP("localtimestamp", PrestoDataType.TIMESTAMP),
 
     // This is an alias for current_timestamp. → timestamp with time zone#
-    NOW("now", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
+//    NOW("now", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
 
     // Formats x as an ISO 8601 string. x can be date, timestamp, or timestamp with time zone. → varchar#
-    TO_ISO8601("to_iso8601", PrestoDataType.VARCHAR, PrestoDataType.DATE, PrestoDataType.TIMESTAMP,
-            PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
+//    TO_ISO8601("to_iso8601", PrestoDataType.VARCHAR, PrestoDataType.DATE, PrestoDataType.TIMESTAMP,
+//            PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
 
     // Returns the day-to-second interval as milliseconds. → bigint#
-    TO_MILLISECONDS("to_milliseconds", PrestoDataType.INT, PrestoDataType.INTERVAL_DAY_TO_SECOND),
-    TO_MILLISECONDS_2("to_milliseconds", PrestoDataType.INT, PrestoDataType.INTERVAL_YEAR_TO_MONTH),
+//    TO_MILLISECONDS("to_milliseconds", PrestoDataType.INT, PrestoDataType.INTERVAL_DAY_TO_SECOND),
+//    TO_MILLISECONDS_2("to_milliseconds", PrestoDataType.INT, PrestoDataType.INTERVAL_YEAR_TO_MONTH),
 
     // Returns timestamp as a UNIX timestamp. → double#
     TO_UNIXTIME("to_unixtime", PrestoDataType.FLOAT, PrestoDataType.TIMESTAMP),
-    TO_UNIXTIME_2("to_unixtime", PrestoDataType.FLOAT, PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
+//    TO_UNIXTIME_2("to_unixtime", PrestoDataType.FLOAT, PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
 
     // The following SQL-standard functions do not use parenthesis:
     CURRENT_DATE_NA("current_date", PrestoDataType.DATE) {
@@ -82,12 +78,12 @@ public enum PrestoDateFunction implements PrestoFunction {
         }
     },
 
-    CURRENT_TIME_NA("current_time", PrestoDataType.TIME) {
-        @Override
-        public boolean isStandardFunction() {
-            return false;
-        }
-    },
+//    CURRENT_TIME_NA("current_time", PrestoDataType.TIME) {
+//        @Override
+//        public boolean isStandardFunction() {
+//            return false;
+//        }
+//    },
 
     CURRENT_TIMESTAMP_NA("current_timestamp", PrestoDataType.TIMESTAMP) {
         @Override
@@ -96,12 +92,12 @@ public enum PrestoDateFunction implements PrestoFunction {
         }
     },
 
-    LOCALTIME_NA("localtime", PrestoDataType.TIME) {
-        @Override
-        public boolean isStandardFunction() {
-            return false;
-        }
-    },
+//    LOCALTIME_NA("localtime", PrestoDataType.TIME) {
+//        @Override
+//        public boolean isStandardFunction() {
+//            return false;
+//        }
+//    },
 
     LOCALTIMESTAMP_NA("localtimestamp", PrestoDataType.TIMESTAMP) {
         @Override
@@ -113,10 +109,10 @@ public enum PrestoDateFunction implements PrestoFunction {
     // Truncation Function
     // date_trunc(unit, x) → [same as input]
     DATE_TRUNC_1("date_trunc", PrestoDataType.TIMESTAMP, PrestoDataType.VARCHAR, PrestoDataType.TIMESTAMP),
-    DATE_TRUNC_2("date_trunc", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.VARCHAR,
-            PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
-    DATE_TRUNC_3("date_trunc", PrestoDataType.DATE, PrestoDataType.VARCHAR, PrestoDataType.DATE),
-    DATE_TRUNC_4("date_trunc", PrestoDataType.TIME, PrestoDataType.VARCHAR, PrestoDataType.TIME);
+//    DATE_TRUNC_2("date_trunc", PrestoDataType.TIMESTAMP_WITH_TIME_ZONE, PrestoDataType.VARCHAR,
+//            PrestoDataType.TIMESTAMP_WITH_TIME_ZONE),
+    DATE_TRUNC_3("date_trunc", PrestoDataType.DATE, PrestoDataType.VARCHAR, PrestoDataType.DATE);
+//    DATE_TRUNC_4("date_trunc", PrestoDataType.TIME, PrestoDataType.VARCHAR, PrestoDataType.TIME);
 
     /*
      *
diff --git a/src/sqlancer/presto/ast/PrestoMultiValuedComparisonOperator.java b/src/sqlancer/presto/ast/PrestoMultiValuedComparisonOperator.java
index 829f554f..09132289 100644
--- a/src/sqlancer/presto/ast/PrestoMultiValuedComparisonOperator.java
+++ b/src/sqlancer/presto/ast/PrestoMultiValuedComparisonOperator.java
@@ -26,10 +26,7 @@ public enum PrestoMultiValuedComparisonOperator {
         case FLOAT:
         case DECIMAL:
         case DATE:
-        case TIME:
         case TIMESTAMP:
-        case TIME_WITH_TIME_ZONE:
-        case TIMESTAMP_WITH_TIME_ZONE:
             return getRandom();
         default:
             return Randomly.fromOptions(EQUALS, NOT_EQUALS, NOT_EQUALS_ALT);
diff --git a/src/sqlancer/presto/gen/PrestoTypedExpressionGenerator.java b/src/sqlancer/presto/gen/PrestoTypedExpressionGenerator.java
index 4a788f01..3beae594 100644
--- a/src/sqlancer/presto/gen/PrestoTypedExpressionGenerator.java
+++ b/src/sqlancer/presto/gen/PrestoTypedExpressionGenerator.java
@@ -135,16 +135,16 @@ public final class PrestoTypedExpressionGenerator extends
             case FLOAT:
                 return generateNumericExpression(depth);
             case DATE:
-            case TIME:
+//            case TIME:
             case TIMESTAMP:
-            case TIME_WITH_TIME_ZONE:
-            case TIMESTAMP_WITH_TIME_ZONE:
-                return generateTemporalExpression(type, depth);
-            case INTERVAL_YEAR_TO_MONTH:
-            case INTERVAL_DAY_TO_SECOND:
-                return generateIntervalExpression(type, depth);
-            case JSON:
-                return generateJsonExpression(type);
+//            case TIME_WITH_TIME_ZONE:
+//            case TIMESTAMP_WITH_TIME_ZONE:
+//                return generateTemporalExpression(type, depth);
+//            case INTERVAL_YEAR_TO_MONTH:
+//            case INTERVAL_DAY_TO_SECOND:
+//                return generateIntervalExpression(type, depth);
+//            case JSON:
+//                return generateJsonExpression(type);
             case VARBINARY:
             case ARRAY:
                 // case MAP:
@@ -383,7 +383,7 @@ public final class PrestoTypedExpressionGenerator extends
         // timestamp at time zone
         if (Randomly.getBooleanWithSmallProbability()
                 && (type.getPrimitiveDataType() == PrestoSchema.PrestoDataType.TIMESTAMP
-                        || type.getPrimitiveDataType() == PrestoSchema.PrestoDataType.TIMESTAMP_WITH_TIME_ZONE)) {
+                        /*|| type.getPrimitiveDataType() == PrestoSchema.PrestoDataType.TIMESTAMP_WITH_TIME_ZONE*/)) {
             return new PrestoAtTimeZoneOperator(generateExpression(type, depth + 1),
                     PrestoConstant.createTimezoneConstant());
         }
@@ -737,18 +737,18 @@ public final class PrestoTypedExpressionGenerator extends
             case FLOAT:
             case DECIMAL:
             case DATE:
-            case TIME:
+            //case TIME:
             case TIMESTAMP:
-            case TIME_WITH_TIME_ZONE:
-            case TIMESTAMP_WITH_TIME_ZONE:
+//            case TIME_WITH_TIME_ZONE:
+//            case TIMESTAMP_WITH_TIME_ZONE:
                 return getRandom();
             case VARCHAR:
             case CHAR:
             case VARBINARY:
-            case JSON:
+           // case JSON:
             case ARRAY:
-            case INTERVAL_YEAR_TO_MONTH:
-            case INTERVAL_DAY_TO_SECOND:
+//            case INTERVAL_YEAR_TO_MONTH:
+//            case INTERVAL_DAY_TO_SECOND:
                 // return Randomly.fromOptions(EQUALS, NOT_EQUALS, NOT_EQUALS_ALT,
                 // IS_DISTINCT_FROM,
                 // IS_NOT_DISTINCT_FROM);
